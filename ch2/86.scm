#lang sicp
;; hashtable get/put
(#%require (only racket/base make-hash hash-ref hash-set!))
(define *op-table* (make-hash))
(define (put op type proc)
  (hash-set! *op-table* (list op type) proc))
(define (get op type)
  (hash-ref *op-table* (list op type) #f))
  
;; Operation API
(define (add x y)
  (apply-generic 'add x y))
(define (sub x y)
  (apply-generic 'sub x y))
(define (mul x y)
  (apply-generic 'mul x y))
(define (div x y)
  (apply-generic 'div x y))
(define (equ? x y)
  (apply-generic 'equ? x y))
(define (exp x y)
  (apply-generic 'exp x y))
(define (=zero? x)
  (apply-generic '=zero? x))
(define (square x)
  (apply-generic 'square x))
(define (sq-root x)
  (apply-generic 'sq-root x))
(define (sine x)
  (apply-generic 'sine x))
(define (cosine x)
  (apply-generic 'cosine x))
(define (arctan x y)
  (apply-generic 'arctan x y))

;; scheme number
(define (install-scheme-number-package)
  (define (tag x) (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'equ? '(scheme-number scheme-number)
       =)
  (put '=zero? '(scheme-number)
       zero?)
  (put 'exp '(scheme-number scheme-number)
       (lambda (x y) (tag (expt x y))))
  (put 'make 'scheme-number (lambda (x) (tag x)))
  (put 'sq-root '(scheme-number) (lambda (x) (make-real (sqrt x))))
  (put 'square '(scheme-number) (lambda (x) (tag (* x x))))
  (put 'sine '(scheme-nubmer) (lambda (x) (make-real (sin x))))
  (put 'cosine '(scheme-number) (lambda (x) (make-real (cos x))))
  (put 'arctan '(scheme-number scheme-number) (lambda (x y) (make-real (atan x y))))
  ; raise
  (put 'raise 'scheme-number (lambda (n) (make-rational n 1)))
  'done)
(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))

;; rational package
(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (equ?-rat x y)
    (or (and (= (numer x) (numer y)) (= (denom x) (denom y)))
        (and (zero? (+ (numer x) (numer y))) (zero? (+ (denom x) (denom y))))))
  (define (=zero?-rat x)
    (zero? (numer x)))
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'equ? '(rational rational)
       equ?-rat)
  (put '=zero? '(rational)
       =zero?-rat)
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (define (ratio x) (/ (numer x) (denom x)))
  (put 'sq-root '(rational) (lambda (x) (make-real (sqrt (ratio x)))))
  (put 'square '(rational) (lambda (x) (tag (mul-rat x x))))
  (put 'sine '(rational) (lambda (x) (make-real (sin (ratio x)))))
  (put 'cosine '(rational) (lambda (x) (make-real (cos (ratio x)))))
  (put 'arctan '(rational rational) (lambda (x y) (make-real (atan (ratio x) (ratio y))))) 
  ; raise
  (define (rational->real rn)
    (let ((r (contents rn)))
      (make-real (/ (numer r) (denom r)))))
  (put 'raise 'rational rational->real)
  ; project
  (define (rational->scheme-number rn)
      (make-scheme-number (numer (contents rn))))
  (put 'project 'rational rational->scheme-number)
  'done)
(define (make-rational n d)
  ((get 'make 'rational) n d))

;; real number
(define (install-real-package)
  (define (tag x) (attach-tag 'real x))
  (put 'add '(real real)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(real real)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(real real)
       (lambda (x y) (tag (* x y))))
  (put 'div '(real real)
       (lambda (x y) (tag (/ x y))))
  (put 'equ? '(real real)
       =)
  (put '=zero? '(real)
       zero?)
  (put 'make 'real
       (lambda (x) (tag x)))
  ; for 2.86
  (put 'sq-root '(real) (lambda (x) (tag (sqrt x))))
  (put 'square '(real) (lambda (x) (tag (* x x))))
  (put 'sine '(real) (lambda (x) (tag (sin x))))
  (put 'cosine '(real) (lambda (x) (tag (cos x))))
  (put 'arctan '(real real) (lambda (x y) (tag (atan x y))))
  ; raise
  (define (real->complex rn)
    (make-complex-from-real-imag (contents rn) 0))
  (put 'raise 'real real->complex)
  ; project
  (define (real->rational rn)
    (let ((n (contents rn)))
      (let ((rat (rationalize (inexact->exact n) 1/100)))
        (make-rational (numerator rat) (denominator rat)))))
  (put 'project 'real real->rational)
  'done)
(define (make-real x)
  ((get 'make 'real) x))

;; complex package
(define (install-complex-package)
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  (define (add-complex z1 z2)
    (make-from-real-imag (add (real-part z1) (real-part z2))
                         (add (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (sub (real-part z1) (real-part z2))
                         (sub (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-real-imag (mul (magnitude z1) (magnitude z2))
                         (add (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-real-imag (div (magnitude z1) (magnitude z2))
                         (sub (angle z1) (angle z2))))
  (define (equ?-complex z1 z2)
    (or (and (equ? (real-part z1) (real-part z2))
             (equ? (imag-part z1) (imag-part z2)))
        (and (equ? (magnitude z1) (magnitude z2))
             (equ? (angle z1) (angle z2)))))
  (define (=zero?-complex z)
    (or (and (zero? (real-part z)) (zero? (imag-part z)))
        (zero? (magnitude z))))
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
    (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
    (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
    (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
    (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'equ? '(complex complex)
    equ?-complex)
  (put '=zero? '(complex)
    =zero?-complex)
  (put 'make-from-real-imag 'complex
    (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
    (lambda (r a) (tag (make-from-mag-ang r a))))
  ; project
  (define (complex->real cn)
        (make-real (real-part (contents cn))))
  (put 'project 'complex complex->real)
  'done)
(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))
;; rectangular implementation of complex number
(define (install-rectangular-package)
  ;; internal procedures
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sq-root (add (square (real-part z))
             (square (imag-part z)))))
  (define (angle z)
    (arctan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (* r (cosine a)) (* r (sine a))))
  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular
      (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular
      (lambda (r a) (tag (make-from-mag-ang r a))))
  '(install-rectangular-package done))
;; polar implementation of complex number
(define (install-polar-package)
  ; iternal procedures
  (define (real-part z) (mul (magnitude z) (cosine (angle z))))
  (define (imag-part z) (mul (magnitude z) (sine (angle z))))
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-real-imag x y)
    (cons (sq-root (add (square x) (square y)))
          (arctan y x)))
  (define (make-from-mag-ang r a) (cons r a))
  ; interface to the rest of the system
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar
       (lambda (r a) (tag (make-from-mag-ang r a))))
  '(install-polar-package done))
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))
(define (make-from-real-imag x y)
  ((get 'make-from-real-imag 'rectangular) x y))
(define (make-from-mag-ang r a)
  ((get 'make-from-mag-ang 'polar) r a))

;; generic program
; generic apply
(define op-methods '(add sub mul div sq-root square sine cosine arctan))
(define (apply-generic op . args)
  (define (in? op op-methods)
    (define (iter op op-methods)
      (if (null? op-methods)
          #f
          (or (eq? op (car op-methods)) (iter op (cdr op-methods)))))
    (iter op op-methods))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (if (in? op op-methods)
              (drop (apply proc (map contents args)))
              (apply proc (map contents args)))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (cond
                  ((eq? type1 type2)
                   (error "No method for these types"
                          (list op type-tags)))
                  ((lower-than type1 type2)
                   (apply-generic op (raise a1) a2))
                  (else
                   (apply-generic op a1 (raise a2)))))
              (error "No method for these types"
                     (list op type-tags)))))))
; generic raise
(define (raise number)
  (let ((type (type-tag number)))
    (let ((raise-proc (get 'raise type)))
      (if raise-proc
          (raise-proc number)
          number))))
(define type-tower '(scheme-number rational real complex))
(define (lower-than type1 type2)
  (define (iter type-tower)
    (cond
      ((null? type-tower) (error "No these type in type tower" (list type1 type2)))
      ((eq? type1 (car type-tower)) #t)
      ((eq? type2 (car type-tower)) #f)
      (else (iter (cdr type-tower)))))
  (iter type-tower))
; generic project
(define (project number)
  (let ((type (type-tag number)))
    (let ((project-proc (get 'project type)))
      (if project-proc
          (project-proc number)
          (error "No project method for these type" type)))))
; generic drop
(define (drop x)
  (let ((project-proc (get 'project (type-tag x))))
    (if project-proc
        (let ((project-number (project-proc x)))
          (if (equ? project-number x)
              (drop project-number)
              x))
        x)))

;; generic function utility
(define (attach-tag type-tag contents)
  (if (and (not (symbol? contents)) (number? contents) (eq? type-tag 'scheme-number))
      contents
      (cons type-tag contents)))
(define (type-tag datum)
  (cond
    ((and (not (symbol? datum)) (number? datum)) 'scheme-number)
    ((pair? datum) (car datum))
    (else (error "Bad tagged datum: TYPE-TAG" datum))))
(define (contents datum)
  (cond
    ((and (not (symbol? datum)) (number? datum)) datum)
    ((pair? datum) (cdr datum))
    (else (error "Bad tagged datum: CONTENTS" datum))))

;; install package
(install-scheme-number-package)
(install-rational-package)
(install-real-package)
(install-rectangular-package)
(install-polar-package)
(install-complex-package)

;; test

(define c1 (make-complex-from-real-imag (make-rational 1 2) (make-rational 1 2)))
(define c2 (make-complex-from-real-imag (make-rational 1 2) (make-rational 1 2)))

(define an-int (make-scheme-number 4))
(define a-real (make-real 0.65))
(define a-rat  (make-rational 7 10))
(define a-complex-mag-ang   (make-complex-from-mag-ang   (make-scheme-number 5) (make-real 0.75)))
(define a-complex-real-imag (make-complex-from-real-imag (make-rational 7 2) (make-scheme-number 9)))
