(define (make-account balance password)
  (define (handle-account)
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (define (dispatch command)
          (cond
              ((eq? command 'withdraw) withdraw)
              ((eq? command 'deposit) deposit)
              (else (error "Unknown request: MAKE-ACCOUNT" command))))
    dispatch)
  (define (vaild? key) (eq? key password))
  (define (dispatch key command)
    (cond 
      ((not (vaild? key)) (error "Incorrect password: MAKE-ACCOUNT"))
      ((eq? command 'make-joint) (handle-account))
      (else ((handle-account) command))))
  dispatch)

(define (make-joint origin-acc password joint-password)
  (define origin-handle-dispatch (origin-acc password 'make-joint))
  (define (vaild? key) (eq? key joint-password))
  (lambda (key command)
    (if (vaild? key)
        (origin-handle-dispatch command)
        (error "Incorrect password: MAKE-JOINT"))))
; test
; (define peter-acc (make-account 100 'open-sesame))
; ((peter-acc 'open-sesame 'withdraw) 50)
; ((peter-acc 'open-sesame 'deposit) 50)
; (define paul-acc (make-joint peter-acc 'open-sesame 'rosebud))
; ((paul-acc 'rosebud 'withdraw) 50)
; ((paul-acc 'rosebud 'deposit) 50)

; old test
; (define acc (make-account 100 'secret-password))
; ((acc 'secret-password 'withdraw) 50)
; ((acc 'some-other-password 'withdraw) 60)
; ((acc 'some-other-password 'deposit) 40)
; ((acc 'secret-password 'deposit) 60)

