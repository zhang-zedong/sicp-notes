#lang sicp
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue" dispatch)
          (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond 
          ((empty-queue?)
            (set-front-ptr! new-pair)
            (set-rear-ptr! new-pair)
            dispatch)
          (else
            (set-cdr! rear-ptr new-pair)
            (set-rear-ptr! new-pair)
            dispatch))))
    (define (delete-queue!)
      (cond 
        ((empty-queue?)
          (error "DELETE! called with an empty queue") dispatch)
        (else
          (set-front-ptr! (cdr front-ptr))
          dispatch)))
    (define (print)
      (display front-ptr)
      (newline))
    (define (dispatch m)
      (cond
        ((eq? m 'front-queue) (front-queue))
        ((eq? m 'insert-queue!) insert-queue!)
        ((eq? m 'delete-queue!) (delete-queue!))
        ((eq? m 'print) (print))
        (else (error "Unknown method" m))))
    dispatch))
(define (front-queue q) (q 'front-queue))
(define (insert-queue! q) (q 'insert-queue!))
(define (delete-queue! q) (q 'delete-queue!))
(define (print q) (q 'print))


; (define q1 (make-queue))
; ((q1 'insert-queue!) 'a)
; ((q1 'insert-queue!) 'b)
; ((q1 'insert-queue!) 'c)
; (q1 'print)
; (q1 'delete-queue!)
; ((((q1 'insert-queue!) 'd) 'insert-queue!) 'e)